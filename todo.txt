We splited the work into two parts:
1 -> managing sockets: read request and parse it. sending response to client (non-blocking).
2 -> pasrsing config file and and hundling requests based on configuration & CGI.

2Part Todolist:

- [x] read config file;
	- [x] set a data structres to store virtual servers
	- [x] handle errors;
	- [x] set default dirivtives to default values if not defined on condig file
	- [x] create Servers interface that holds all valid Virtual servers
	- [x] add "return" to location and "error_page" to server
	- [x] add upload path to location

- [x] Server and Location Block Selection
	- [x] select which Server block will handle a request based
	on IP:PORT and SERVER_NAME
	- [x] select which Location block will serve a request based on path

- [] handle requests
	- [x] create a Response class
	- [] implement a Reqhandler class that takes request and create a response
	based on configuation
	- [] if the requested resource is a CGI script just print CGI on output.
	CGI will be handled later.

- [] handle CGI
	- [] add request headers to envirment variables wih "setenv(n,v,or)"
	- [] create a new process
	- [] if method=GET add QUERY_STRING env if post open body file and dup to cgi-input
	- [] get out put and create a response




!!! headers

headers for requests with body

`Transfer-Encoding: gzip, chunked

	indicates that the payload body has been compressed using the gzip
	coding and then chunked using the chunked coding while forming the
	message body.

	A server that receives a request message with a transfer coding it
	does not understand SHOULD respond with 501 (Not Implemented).

Content-Length: 3495`

	A server MAY send a Content-Length header field in a 304 (Not
	Modified) response to a conditional GET request (Section 4.1 of
	[RFC7232]); a server MUST NOT send Content-Length in such a response

	unless its field-value equals the decimal number of octets that would
	have been sent in the payload body of a 200 (OK) response to the same
	request.

	A server MUST NOT send a Content-Length header field in any response
	with a status code of 1xx (Informational) or 204 (No Content).  A
	server MUST NOT send a Content-Length header field in any 2xx
	(Successful) response to a CONNECT request (Section 4.3.6 of
	[RFC7231]).

	If a message is received with both a Transfer-Encoding and a
	Content-Length header field, the Transfer-Encoding overrides the
	Content-Length.  Such a message might indicate an attempt to
	perform request smuggling (Section 9.5) or response splitting
	(Section 9.4) and ought to be handled as an error.  A sender MUST
	remove the received Content-Length field prior to forwarding such
	a message downstream.

Host: www.example.com
	The "Host" header field in a request provides the host and port
	information from the target URI, enabling the origin server to
	distinguish among resources while servicing requests for multiple
	host names on a single IP address.

	Since the Host field-value is critical information for handling a
	request, a user agent SHOULD generate Host as the first header field
	following the request-line.


	A server MUST respond with a 400 (Bad Request) status code to any
	HTTP/1.1 request message that lacks a Host header field and to any
	request message that contains more than one Host header field or a
	Host header field with an invalid field-value.


ErrGen -> ResGenerator
| 400  | Bad Request                   | -> syntax error/ nonformated request...
| 401  | Unauthorized                  |
| 402  | Payment Required              |
| 403  | Forbidden                     |
| 404  | Not Found                     | -> resource not found
| 405  | Method Not Allowed            | -> method known but not allowed on that resource
| 406  | Not Acceptable                | -> content-negotiation: Encoding gzip....
| 407  | Proxy Authentication Required | ??
| 408  | Request Timeout               | -> connection opened but no request was sent after 50s
| 409  | Conflict                      |
| 410  | Gone                          |
| 411  | Length Required               | -> post request not chunked and no content lenght
| 412  | Precondition Failed           |
| 413  | Payload Too Large             | -> post request with body bigger than CLIENT_MAX_BODY_SIZE;
| 414  | URI Too Long                  |
| 415  | Unsupported Media Type        |
| 416  | Range Not Satisfiable         |
| 417  | Expectation Failed            |
| 426  | Upgrade Required              |
| 500  | Internal Server Error         |
| 501  | Not Implemented               | -> valid method but not implemented
| 502  | Bad Gateway                   | -> cgi not accessible
| 503  | Service Unavailable           |
| 504  | Gateway Timeout               | -> cgi timeout
| 505  | HTTP Version Not Supported    | -> http version other than 1.0/1.1
