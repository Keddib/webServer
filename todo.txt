We splited the work into two parts:
1 -> managing sockets: read request and parse it. sending response to client (non-blocking).
2 -> pasrsing config file and and hundling requests based on configuration & CGI.

2Part Todolist:

- [x] read config file;
	- [x] set a data structres to store virtual servers
	- [x] handle errors;
	- [x] set default dirivtives to default values if not defined on condig file
	- [x] create Servers interface that holds all valid Virtual servers
	- [x] add "return" to location and "error_page" to server
	- [x] add upload path to location

- [x] Server and Location Block Selection
	- [x] select which Server block will handle a request based
	on IP:PORT and SERVER_NAME
	- [x] select which Location block will serve a request based on path

- [x] create defualt error pages
	- [x] implement response generator that generete responses based on status code
	- [x] check if user defined error pages if not not use defualt ones instead.

- [x] handle requests
	- [x] create a Response class
	- [x] implement a Reqhandler class that takes request and create a response
	based on configuation
	- [x] if the requested resource is a CGI script just print CGI on output.
	CGI will be handled later.
	- [x] directory listing -> function that list content of a directory.

- [x] redirection
	- [x] valid code redirection with Location header in response
	- [x] invalid redirection codes hudnled based on NGINX behavoir.


- [x] handle CGI
	- [x] set all ENV variables needed to the cgi script including HTTP_ headers
	- [x] create a new process
	- [x] if method=GET add QUERY_STRING env if post open body file and dup to cgi-input
	- [x] get the output and kill the process
	- [x] CGI response parsing
		- [x] Document Response: Content-Type | Status = 200;
		- [x] Local Redirect Response : Location : local URI PATH // no other header field
		- [x] Client Redirect Response : Location : Absolute URI redirect with 302
		- [x] Client Redirect Response with Document : Location | Status (redirection code) | Content-Type;

- [] upload
	???


!!!!! if autoindex off and index not setted and the resource is directory return 403 Forbidden


Need to add HTTP_ headers

CGI headers
	- AUTH_TYPE:!!! Authentication not implemente
	if the client request required Authentication for external acess, then the server MUST set the value of this variable
	from the 'auth-scheme' token in the request authorization header field.
	!!! Authentication not implemented yet I think it's necessery for CGI

	- CONTENT_LENGHT:
	the server MUST set this meta-variable if and only if the request is accompanied
	by a message body. the value must reflect the length of the body after removing any
	transfer-codings or content-codings

	- CONTENT_TYPE:
	the server MUST set this meta-variable if an HTTP Content-Type field is present
	in the client request header. If this header is not present and the request has a Payload.
	the server MAY attempt to determine the correct content type, otherwise it sould omit this
	meta-variable.

	- GETAWAY_INTERFACE:
	this variable MUST be set to the dialect of CGI being used by the server to communicate
	with the secript. CGI/1.1

	- PATH_INFO:
	this variable specifies a path to be interpreted by the CGI script.
	- PATH_TRANSLATED:
	This is the file location that would be accessed by a request for
	<scheme> "://" <server-name> ":" <server-port> <extra-path>
	where <scheme> is the scheme for the original client request and
	<extra-path> is a URL-encoded version of PATH_INFO, with ";", "=" and
	"?" reserved. For example, a request such as the following:
	http://somehost.com/cgi-bin/somescript/this%2eis%2epath%3binfo
	would result in a PATH_INFO value of
	/this.is.the.path;info
	An internal URI is constructed from the scheme, server location and
	the URL-encoded PATH_INFO:
	http://somehost.com/this.is.the.path%3binfo
	This would then be translated to a location in the server's document
	repository, perhaps a filesystem path something like this:
	/usr/local/www/htdocs/this.is.the.path;info
	The value of PATH_TRANSLATED is the result of the translation.
	The server SHOULD set this meta-variable if the request URI includes
	a path-info component.  If PATH_INFO is NULL, then the
	PATH_TRANSLATED variable MUST be set to NULL (or unset).

	The server SHOULD set this meta-variable if the request URI includes
	a path-info component.  If PATH_INFO is NULL, then the
	PATH_TRANSLATED variable MUST be set to NULL (or unset).

	- QUERY_STRING:
	the server MUST set this variable; if the Scripy-URI doesn't include a query
	component, the QUERY_STRING MUST be defined as an empty string ("").

	- REMOTE_ADDR:
	MUST be set to the network address of the client sending the request to the
	server.

	- REMOTE_USER: !!! Authentication not implemented
	if the client request required HTTP Authentication. AUTH_TYPE is set to "Basic"
	ot "Digest", then the  REMOTE_USER MUST be set to the user-ID supplied

	- REQUEST_METHOD:
	MUST be set to the method which should be used by the script to process the
	the request.

	- SCRIPT_NAME:
	the resource

	- SERVER_NAME:
	the host of the request

	- SERVER_PORT:
	the port of the tcp/ip port number on which this request is recieved from the
	client. This value is used in the port part of the Script-URI.

	- SERVER_PROTOCOL:
	HTTP/1.1

	- SERVER_SOFTWARE:
	The SERVER_SOFTWARE meta-variable MUST be set to the name and version
	of the information server software making the CGI request (and
	running the gateway).  It SHOULD be the same as the server
	description reported to the client, if any.
	-


-> [x] heade fields values lower-case !!!!
-> [x] if Version 1.0 and host not found set Host to "_".

!!!! note the server can't handle more than one request .. it hangs out ???


ErrGen -> ResGenerator
| 400  | Bad Request                   | -> syntax error/ nonformated request...
| 401  | Unauthorized                  |
| 402  | Payment Required              |
| 403  | Forbidden                     |
| 404  | Not Found                     | -> resource not found
| 405  | Method Not Allowed            | -> method known but not allowed on that resource
| 406  | Not Acceptable                | -> content-negotiation: Encoding gzip....
| 407  | Proxy Authentication Required | ??
| 408  | Request Timeout               | -> connection opened but no request was sent after 50s
| 409  | Conflict                      |
| 410  | Gone                          |
| 411  | Length Required               | -> post request not chunked and no content lenght
| 412  | Precondition Failed           |
| 413  | Payload Too Large             | -> post request with body bigger than CLIENT_MAX_BODY_SIZE;
| 414  | URI Too Long                  |
| 415  | Unsupported Media Type        |
| 416  | Range Not Satisfiable         |
| 417  | Expectation Failed            |
| 426  | Upgrade Required              |
| 500  | Internal Server Error         |
| 501  | Not Implemented               | -> valid method but not implemented
| 502  | Bad Gateway                   | -> cgi not accessible
| 503  | Service Unavailable           |
| 504  | Gateway Timeout               | -> cgi timeout
| 505  | HTTP Version Not Supported    | -> http version other than 1.0/1.1

testing

ab -n 10000 -c 10 $scheme://host:port/resource
